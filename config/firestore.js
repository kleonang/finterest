
import {
    collection,
    onSnapshot,
    query,
    getDocs,
    doc,
    getDoc,
    updateDoc,
    setDoc,
    orderBy,
    Timestamp,
    runTransaction,
    where,
    addDoc,
    arrayUnion,
    serverTimestamp,
    documentId,
} from "firebase/firestore";

import { db } from "@/config/firebase.config.js";

export async function addNewArticle(
    articleId,
    article
) {
    const articleToStore = {
        article_id: articleId,
        title: article.title,
        link: article.link,
        creator: article.creator,
        image_url: article.image_url,
        description: article.description,
        content: article.content,
        pubDate: (new Date(article.pubDate)).getTime(),
        source_id: article.source_id,
        category: article.category,
        dateStored: (new Date()).getTime(),
    }

    // Add article to database
    await setDoc(doc(db, "articles", articleId), articleToStore);
}

// Returns a list of article id strings
export async function getArticleIdList() {
    const q = query(collection(db, "articles"));
    const results = await getDocs(q);

    return results.docs.map(currDoc => {
        return currDoc.id;
    });
}

// Get an article object
export async function getArticle(articleId) {
    const docRef = doc(db, "articles", articleId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return docSnap.data();
    } else {
        return null;
    }
}

// Add articleID to the chats array in the users document
export async function addArticleIdToUser(userId, articleId) {
    const userRef = doc(db, "users", userId);

    await updateDoc(userRef, {
        chats: arrayUnion(articleId)
    });
    // chatId = userId + articleId << In this way all chats still have unique Ids
}

// Add user to user collection with empty chat list
export async function addUserIfNotExist(userId) {
    console.log("ADDING USER");
    const userRef = doc(db, "users", userId);

    const docSnap = await getDoc(userRef);

    if (!docSnap.exists()) {
        await setDoc(userRef, {
            chats: []
        });
    }
}

// Add messageID to the messages array in the chats document
export async function addMessageIdToChat(chatId, messageId) {
    const chatRef = doc(db, "chats", chatId);

    await updateDoc(chatRef, {
        messages: arrayUnion(messageId)
    });
}

// Add message to the messages collection with id generated by firebase and return the id
export async function addMessage(message, chatId) {
    const messageRef = await addDoc(collection(db, "messages"), message);

    // Add message id to the chat
    await addMessageIdToChat(chatId, messageRef.id);

    return messageRef.id;
}

// Add chat
export async function addChat(chatToStore, articleId, newChatId, userId) {
    const chatRef = doc(db, "chats", newChatId);

    const docSnap = await getDoc(chatRef);

    if (!docSnap.exists()) {
        // Add chat id to the user
        await addArticleIdToUser(userId, articleId);


        await setDoc(doc(db, "chats", newChatId), chatToStore);
    }
}

// Get a chat object
export async function getChat(chatId) {
    const docRef = doc(db, "chats", chatId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return docSnap.data();
    } else {
        return null;
    }
}

// Get a message object
export async function getMessage(messageId) {
    const docRef = doc(db, "messages", messageId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return docSnap.data();
    } else {
        return null;
    }
}

// CAUTION: This returns a list of article IDs. To get the chat ID u have to do userId + articleId
export async function getChatIdList(userId) {
    const docRef = doc(db, "users", userId);
    const docSnap = await getDoc(docRef);

    if (Array.isArray(docSnap.data().chats)) {
        return docSnap.data().chats.map(currChat => {
            return currChat
        });
    } else {
        return [];
    }
}

// Get message list for chatID
export async function getMessageList(chatId) {
    const docRef = doc(db, "chats", chatId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return docSnap.data().messages;
    } else {
        return [];
    }
}



// Checks if an article conversation exists in the database, given a user and an article
export async function doesArticleChatExist(articleChatId) {
    const docRef = doc(db, "article_chats", articleChatId);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return docSnap.data();
    } else {
        return null;
    }
}

// Creates a new article chat
export async function createNewArticleChat(uid, articleId, articleChatId) {
    await setDoc(doc(db, "article_chats", articleChatId), {
        uid: uid,
        article_id: articleId,
        message_history: []
    });
}


// Stores a new message being sent by the user
// Returns the updated list of messages
export async function storeArticleChatMessage(articleChatId, message, givenRole) {
    //Retrieve article chat information
    const articleChatRef = doc(db, "article_chats", articleChatId);
    const articleChatSnap = await getDoc(articleChatRef);
    const articleChatSnapData = articleChatSnap.data();


    //Add a new message instance into article messages
    const messagesDocRef = await addDoc(collection(db, "article_messages"), {
        content: message,
        role: givenRole,
        datetime: serverTimestamp(),
        article_chat_id: articleChatId
    });

   
    //Update article chat to indicate that there is at least a message in the history
    if (! articleChatSnapData.hasMessage) {
        await updateDoc(articleChatRef, {
            hasMessage: true
        });
    }
    
    return fetchArticleChatHistory(articleChatId);

}

//Fetch list of article chat history based on user chat id
//Each article chat history is returned in the form of an article message instance, i.e. a map with the relevant fields stated in Firestore
export async function fetchArticleChatHistory(articleChatId) {
    //Retrieve article chat message history
    const messagesCollection = collection(db, "article_messages");
    const querySnapshot = await getDocs(query(messagesCollection, where("article_chat_id", "==", articleChatId)));
    const matchingDocuments = [];
    querySnapshot.forEach((doc) => {
        matchingDocuments.push(doc.data());
    });

    //Sort messages in ascending order of datetime
    matchingDocuments.sort((messageOne, messageTwo) => messageOne.datetime - messageTwo.datetime);

    return matchingDocuments;

}


//Check if user has an existing general chat. If yes, return general chat id.
//Else, creates a new general chat instance for the user
let isCreatingGeneralChat = false;
export async function checkOtherwiseCreateGeneralChat(uid) {

    if (isCreatingGeneralChat) {
        return null;
    
    }

    try {
        isCreatingGeneralChat = true;
        const generalChatsCollection = collection(db, "general_chats")
        const queryMade = query(generalChatsCollection, where("uid", "==", uid));
        const querySnapshot = await getDocs(queryMade);
       

        if (! querySnapshot.empty) {
            //General chat exists. Just return id.
            return querySnapshot.docs[0].id;
        } else {
            //General chat does not exist. Create it, and return the id of the new chat
            const chatDocRef = await addDoc(collection(db, "general_chats"), {
                uid: uid,
                hasMessage: false
            });
            return chatDocRef.id
        }
    } finally {
        isCreatingGeneralChat = false;
    }

}

//Fetch list of general chat history based on general chat id
//Each item in the list is returned in the form of a general message instance, i.e. a map with the relevant fields in GENERAL_MESSAGE
//Fetch list of article chat history based on user chat id
//Each article chat history is returned in the form of an article instance, i.e. a map with the relevant fields stated in Firestore
export async function fetchGeneralChatHistory(generalChatId) {
    //Retrieve general chat message history
    const messagesCollection = collection(db, "general_messages");
    const querySnapshot = await getDocs(query(messagesCollection, where("general_chat_id", "==", generalChatId)));
    const matchingDocuments = [];
    querySnapshot.forEach((doc) => {
        matchingDocuments.push(doc.data());
    });

    //Sort messages in ascending order of datetime
    matchingDocuments.sort((messageOne, messageTwo) => messageOne.datetime - messageTwo.datetime);

    return matchingDocuments;

}


// Stores a new general chat message into the database, updating the associated
// general chat instance
export async function storeGeneralChatMessage(generalChatId, message, givenRole) {
    //Retrieve general chat information
    const generalChatRef = doc(db, "general_chats", generalChatId);
    const generalChatSnap = await getDoc(generalChatRef);
    const generalChatSnapData = generalChatSnap.data();


    //Add a new message instance into general messages
    const messagesDocRef = await addDoc(collection(db, "general_messages"), {
        content: message,
        role: givenRole,
        datetime: serverTimestamp(),
        general_chat_id: generalChatId
    });

   
    //Update general chat to indicate that there is at least a message in the history
    if (! generalChatSnapData.hasMessage) {
        await updateDoc(generalChatRef, {
            hasMessage: true
        });
    }
    
    return fetchGeneralChatHistory(generalChatId);

}